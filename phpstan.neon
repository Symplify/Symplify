includes:
    - packages/phpstan-extensions/config/config.neon
    - packages/phpstan-rules/config/symplify-rules.neon
    # for cognitive rules
    - packages/phpstan-rules/config/packages/cognitive-complexity/cognitive-complexity-services.neon
    - packages/phpstan-rules/config/services/services.neon

    - packages/phpstan-rules/config/packages/symfony/services.neon

services:
    # cognitive complexity
    -
        class: Symplify\PHPStanRules\CognitiveComplexity\Rules\FunctionLikeCognitiveComplexityRule
        tags: [phpstan.rules.rule]
        arguments:
            maxMethodCognitiveComplexity: 8

    -
        class: Symplify\PHPStanRules\CognitiveComplexity\Rules\ClassLikeCognitiveComplexityRule
        tags: [phpstan.rules.rule]
        arguments:
            maxClassCognitiveComplexity: 25

parameters:
    level: 8
    reportUnmatchedIgnoredErrors: false

    featureToggles:
        # disable node connecting visitor, see https://github.com/phpstan/phpstan-src/pull/1175
        nodeConnectingVisitorCompatibility: false

    # requires exact closure types
    checkMissingCallableSignature: true

    parallel:
        # to prevent full thread lagging pc
        maximumNumberOfProcesses: 15

    paths:
        - packages
        - ecs.php
        - rector.php

    excludePaths:
        - */scoper.php

        # parallel
        - packages/phpstan-rules/packages/*-phpstan-printer/tests/*ToPhpCompiler/Fixture*
        - packages/*-phpstan-compiler/tests/*ToPhpCompiler/Fixture*
        - packages/easy-coding-standard/build/target-repository/tests

        # class aliasing for old PHPUnit test case
        - packages/easy-ci/packages-tests/Testing/UnitTestFilePathsFinder/UnitTestFilePathsFinderTest.php

        - packages/easy-coding-standard/build/target-repository/bootstrap.php
        # there is some bug
        - packages/package-builder/src/Testing/AbstractKernelTestCase.php
#        - packages/package-builder/src/Console/Command/AbstractSymplifyCommand.php

        # PHP 8 only
        - packages/phpstan-rules/tests/Rules/ForbiddenArrayWithStringKeysRule/FixturePhp80/SkipAttributeArrayKey.php

        # functions false positive
#        - *packages/**/tests/**/config.php
        - *packages/monorepo-builder/templates/*
#        - *packages/phpstan-extensions/**/Source/**
        - packages/phpstan-extensions/tests/TypeExtension/*/*/data/*

        # tests
        - packages/symfony-static-dumper/tests/test_project/

        # 3rd party
        - packages/package-builder/src/Yaml/ParametersMerger.php

        # tests

        - '*/tests/**/Source/*'
        - '*/tests/**/Fixture/*'
        - */stubs/*
        - */packages-tests/**/Fixture/*
        - */packages-tests/**/Source/*
        - packages/vendor-patches/tests/Finder/VendorFilesFinderSource/Vendor/some/package/src/PackageClass.php
#        - packages/phpstan-rules/tests/Rules/AllowedExclusiveDependencyRule/FixturePhp74/*
        # private code for deployed package only
        - packages/phpstan-rules/build/*

    bootstrapFiles:
        - tests/bootstrap.php
        # load functions like service() etc.
        - vendor/symfony/dependency-injection/Loader/Configurator/ContainerConfigurator.php

    ignoreErrors:
        # invalid 3rd party-code
        - '#Parameter \#1 \$index of method PhpCsFixer\\Tokenizer\\Tokens::getNextTokenOfKind\(\) expects int, int\|null given#'

        # required for autowiring, since only interface is autowired
        - '#Call to an undefined method Symfony\\Component\\DependencyInjection\\ContainerInterface::getParameterBag\(\)#'

        # phpstan 0.10 news
        - '#Parameter \#1 \$path of function dirname expects string, string\|false given#'

        # Symfony 4.2 typehint BC-break
        - '#Parameter \#1 \$command of class Symfony\\Component\\Process\\Process constructor expects array, array<string>\|string given#'

        - '#Cannot call method (.*?) on PhpCsFixer\\Tokenizer\\Token\|null#'

        - '#Parameter \#1 \$endPath of method Symfony\\Component\\Filesystem\\Filesystem\:\:makePathRelative\(\) expects string, string\|false given#'

        -
            message: '#Use value object over return of values#'
            paths:
                # Symfony API
                - packages/easy-coding-standard/src/Console/Output/JsonOutputFormatter.php
                # direct string printer
                - packages/rule-doc-generator/src/Printer/CodeSamplePrinter/BadGoodCodeSamplePrinter.php

        -
            message: '#Do not use static property#'
            paths:
                - packages/easy-testing/src/StaticFixtureSplitter.php # 19
                - packages/phpstan-rules/src/NodeFinder/ClassLikeNameFinder.php # 46

        -
            message: '#is forbidden to use#'
            paths:
                - packages/easy-testing/src/PHPUnit/Behavior/DirectoryAssertableTrait.php # 18

        -
            message: '#Use explicit return value over magic &reference#'
            paths:
                - packages/package-builder/src/Reflection/PrivatesCaller.php # 40
                - */PhpDocParser/PhpDocNodeTraverser.php

        # exceptions to get file
        -
            message: '#Function "file_get_contents\(\)" cannot be used/left in the code\: Use Symplify\\SmartFileSystem\\SmartFileSystem\:\:readFile\(\) instead#'
            paths:
                - packages/easy-parallel/src/CpuCoreCountProvider.php
                - packages/smart-file-system/src/SmartFileSystem.php

        # child type
        - '#Parameter \#1 \$node of method Symplify\\PHPStanRules\\Rules\\ForbiddenSpreadOperatorRule\:\:hasVariadicParam\(\) expects PhpParser\\Node\\Expr\\ArrowFunction\|PhpParser\\Node\\Expr\\Closure\|PhpParser\\Node\\Stmt\\ClassMethod\|PhpParser\\Node\\Stmt\\Function_, PhpParser\\Node\\Expr\\ArrowFunction\|PhpParser\\Node\\Expr\\Closure\|\(PhpParser\\Node\\Expr\\FuncCall&PhpParser\\Node\\FunctionLike\)\|\(PhpParser\\Node\\Expr\\MethodCall&PhpParser\\Node\\FunctionLike\)\|\(PhpParser\\Node\\Expr\\StaticCall&PhpParser\\Node\\FunctionLike\)\|PhpParser\\Node\\Stmt\\ClassMethod\|PhpParser\\Node\\Stmt\\Function_ given#'

        -
            message: '#Use another value object over array with string\-keys and objects, array<string, ValueObject\>#'
            paths:
                - packages/easy-testing/src/PHPUnit/Behavior/DirectoryAssertableTrait.php # 91

        # nesting
        - '#Parameter \#1 \$items of class PhpParser\\Node\\Expr\\Array_ constructor expects array<PhpParser\\Node\\Expr\\ArrayItem\|null\>, array<PhpParser\\Node\\Arg\> given#'

        # skipped tests
        - '#Method Symplify\\Skipper\\SkipCriteriaResolver\\SkippedClassAndCodesResolver\:\:resolve\(\) should return array<string, array<string\>\|null\> but returns array<int\|string, mixed\>#'

        -
            message: '#Array destruct is not allowed\. Use value object to pass data instead#'
            paths:
                - packages/smart-file-system/src/Normalizer/PathNormalizer.php

        - '#Parameter (.*?) class ReflectionClass constructor expects class\-string<T of object\>\|T of object, string given#'

        -
            message: '#Array with keys is not allowed\. Use value object to pass data instead#'
            path: packages/php-config-printer/src/Printer/SmartPhpConfigPrinter.php

        -
            message: '#Function "method_exists\(\)" cannot be used/left in the code#'
            paths:
                - packages/monorepo-builder/packages/Release/Process/ProcessRunner.php
                # PHPUnit 9/10 compat
                - packages/symfony-static-dumper/tests/FileSystem/AssetsCopierTest.php

        -
            message: '#Function "property_exists\(\)" cannot be used/left in the code#'
            paths:
                # PHP compat
                - packages/package-builder/src/Reflection/PrivatesAccessor.php

        - '#Method Symplify\\PHPStanRules\\NodeFinder\\MethodCallNodeFinder\:\:findUsages\(\) should return array<PhpParser\\Node\\Expr\\MethodCall\> but returns array<PhpParser\\Node\>#'

        - '#\$this as argument is not allowed\. Refactor method to service composition#'
        -
            message: '#Class cognitive complexity is \d+, keep it under \d+#'
            paths:
                 # traversing is complex operatoin
                 - packages/astral/src/PhpDocParser/PhpDocNodeTraverser.php
                 - packages/php-config-printer/src/NodeFactory/ArgsNodeFactory.php

        - '#Method Symplify\\PHPStanRules\\Rules\\RequireStringRegexMatchKeyRule\:\:findVariableArrayDimFetches\(\) should return array<PhpParser\\Node\\Expr\\ArrayDimFetch\> but returns array<PhpParser\\Node\>#'

        - '#Method Symplify\\EasyTesting\\DataProvider\\StaticFixtureFinder\:\:yieldDirectoryExclusively\(\) should return Iterator<mixed, Symplify\\SmartFileSystem\\SmartFileInfo\> but returns Iterator<mixed, array<int, Symplify\\SmartFileSystem\\SmartFileInfo\>\>#'

        # wrong keys
        - '#Generator expects value type array<array<int\|string\>\|string\>, array<int, array<int, array<int, int\|string\>\>\|string\> given#'
        -
            message: '#Generator expects value type (.*?), array<int, array<int, array<int, int\|string\>\>\|string\> given#'
            paths:
                -  packages/phpstan-rules/tests/Rules

        -
            message: '#Use explicit names over dynamic ones#'
            paths:
                - packages/astral/src/PhpDocParser/PhpDocNodeTraverser.php
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        -
            message:  '#Use separate function calls with readable variable names#'
            paths:
                - packages/astral/src/PhpDocParser/PhpDocNodeTraverser.php
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#\$reflectionClass with generic class ReflectionClass but does not specify its types\: T#'

        -
            message:  '#Use local named constant instead of inline string for regex to explain meaning by constant name#'
            path: packages/easy-coding-standard/scoper.php

        -
            message: '#Instead of "DateTime" class/interface use "Nette\\Utils\\DateTime"#'
            path: packages/easy-coding-standard/scoper.php

        - '#Method "processTokensByFixer\(\)" returns bool type, so the name should start with is/has/was#'

        -
            message: '#cognitive complexity is \d+, keep it under \d+#i'
            paths:
                - packages/php-config-printer/src/PhpParser/NodeFactory/ConfiguratorClosureNodeFactory.php
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#"@var_export\(new \\Symplify\\EasyCodingStandard\\Caching\\ValueObject\\CacheItem\(\$variableKey, \$data\), true\)" is forbidden to use#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\PhpDocParser\\PhpDocNodeTraverser\:\:traverseArray\(\)" is 35, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\PhpDocParser\\PhpDocNodeTraverser\:\:traverseNode\(\)" is 32, keep it under 8#'

        -
            message: '#Class cognitive complexity is \d+, keep it under 25#'
            paths:
                - packages/composer-json-manipulator/src/ValueObject/ComposerJson.php

        -
            message: '#Cannot call method (.*?) on PHPStan\\Command\\Output\|null#'
            path: packages/phpstan-extensions/src/ErrorFormatter/SymplifyErrorFormatter.php

        # this can change on downgrade build
        - "#'@package_version@' and '@package_version@' will always evaluate to false#"

        -
            message: '#Cognitive complexity for "Symplify\\Astral\\PhpDocParser\\PhpDocNodeTraverser\:\:(.*?)\(\)" is \d+, keep it under \d+#'
            path: packages/astral/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#Method Symplify\\EasyCodingStandard\\FixerRunner\\Parser\\FileToTokensParser\:\:parseFromFilePath\(\) should return iterable<PhpCsFixer\\Tokenizer\\Token\>&PhpCsFixer\\Tokenizer\\Tokens but returns PhpCsFixer\\Tokenizer\\Tokens#'

        -
            message: '#Instead of abstract class, use specific service with composition#'
            paths:
                 - packages/phpstan-rules/src/Rules/AbstractSymplifyRule.php
                 - packages/rule-doc-generator-contracts/src/ValueObject/AbstractCodeSample.php
                 - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeVisitor/AbstractPhpDocNodeVisitor.php
                 - packages/symplify-kernel/src/HttpKernel/AbstractSymplifyKernel.php
                 - packages/astral/src/PhpDocParser/PhpDocNodeVisitor/AbstractPhpDocNodeVisitor.php
                 - packages/coding-standard/src/Fixer/AbstractSymplifyFixer.php

        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            paths:
                - packages/easy-ci/src/ValueObject/ConfigFileSuffixes.php

        # on purpose, to make service a simple as possible
        -
            message: '#Instead of "DateTime" class/interface use "Nette\\Utils\\DateTime"#'
            path: packages/easy-coding-standard/src/Application/Version/StaticVersionResolver.php

        # false positive - way too generic
        - '#Property Symplify\\Astral\\NodeValue\\NodeValueResolver\:\:\$nodeValueResolvers with generic interface Symplify\\Astral\\Contract\\NodeValueResolver\\NodeValueResolverInterface does not specify its types\: TExpr#'

        # vendor test case limitation
        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            path: packages/phpstan-extensions/tests/TypeExtension/*/*TypeExtension/*Test.php
        -
            message: '#Spread operator is not allowed#'
            path: packages/phpstan-extensions/tests/TypeExtension/*/*TypeExtension/*Test.php

        # parallel
        - '#popen(.*?)" is forbidden to use#'

        # json return
        -
            message: '#Use value object over return of values#'
            path: packages/easy-coding-standard/packages/Parallel/Application/ParallelFileProcessor.php

        -
            message: '#Cognitive complexity for "(.*?)" is \d+, keep it under 8#'
            paths:
                # complex worker pool logic
                - packages/easy-coding-standard/packages/Parallel/Application/ParallelFileProcessor.php
                # complex search for possible directories
                - packages/phpstan-rules/src/NodeFinder/ClassLikeNameFinder.php
                - packages/easy-parallel/src/CommandLine/WorkerCommandLineFactory.php
                - packages/phpstan-rules/src/Rules/NoMultiArrayAssignRule.php
                - packages/composer-json-manipulator/src/ComposerJsonFactory.php
                - packages/easy-coding-standard/src/Application/EasyCodingStandardApplication.php

        # SmartFileSystem::readFile throws error when file is empty, which we dont want in this case
        -
            message: '#Function "file_get_contents\(\)" cannot be used/left in the code\: Use Symplify\\SmartFileSystem\\SmartFileSystem\:\:readFile\(\) instead#'
            path: packages/phpstan-rules/src/NodeFinder/ClassLikeNameFinder.php

        -
            message:  '#Class cognitive complexity is 26, keep it under 25#'
            path: packages/phpstan-rules/src/NodeFinder/ClassLikeNameFinder.php

        # known realpath() checked with file_exist right above
        -
            message: '#Function resolveConfigFile\(\) should return string\|null but returns string\|false#'
            path: packages/monorepo-builder/bin/monorepo-builder.php

        -
            path: packages/php-config-printer/src/ValueObject/YamlKey.php
            message: '#Class has a static method must so must contains "Static" in its name#'

        # value changed to int
        -
            path: packages/easy-ci/packages/Psr4/Utils/SymplifyStrings.php
            message: '#Strict comparison using \!\=\= between null and null will always evaluate to false#'

        -
            message: '#Cannot call method (.*?) on Symplify\\EasyParallel\\ValueObject\\ProcessPool\|null#'
            path: packages/easy-coding-standard/packages/Parallel/Application/ParallelFileProcessor.php

        -
            message: '#Use another value object over array with string\-keys and objects, array<string, ValueObject\>#'
            paths:
                - packages/symfony-static-dumper/src/Routing/RoutesProvider.php
                - packages/autowire-array-parameter/src/DependencyInjection/DefinitionFinder.php

        # is never string
        - '#"@file_get_contents\(\$fileName\)" is forbidden to use#'

        - '#Property Symplify\\Skipper\\SkipCriteriaResolver\\SkippedClassAndCodesResolver\:\:\$skippedClassAndCodes \(array<string, array<string\>\|null\>\) does not accept array<int\|string, mixed\>#'

        # not useful
        - '#Parameter \#2 \$length of function array_chunk expects int<1, max\>, int given#'

        # invalid PHPStan type - it alwasy requires 2 types to traverse with callable
        -
            message: '#Callable callable\(PHPStan\\Type\\Type\)\: PHPStan\\Type\\Type invoked with 2 parameters, 1 required#'
            path: packages/phpstan-rules/src/Rules/Explicit/NoMixedCallableRule.php

        # weird stringable callable
        -
            message: '#Make callable type explicit\. Here is how\: https\://phpstan\.org/writing\-php\-code/phpdoc\-types\#callables#'
            paths:
                # callable value resolving
                - packages/astral/src/NodeValue/NodeValueResolver/FuncCallValueResolver.php

        # callable value resolving
        -
            message: '#Use explicit names over dynamic ones#'
            path: packages/astral/src/NodeValue/NodeValueResolver/FuncCallValueResolver.php

        -
            message: '#Add explicit array type to assigned "\$definitions" expression#'
            path: packages/config-transformer/src/DependencyInjection/Loader/IdAwareXmlFileLoader.php

        -
            message: '#Add explicit array type to assigned "\$excludeValue" expression#'
            path: packages/php-config-printer/src/NodeFactory/Service/ServicesPhpNodeFactory.php

        -
            message: '#Instead of array shape, use value object with specific types in constructor and getters#'
            paths:
                # json serialize on purpose
                - packages/easy-coding-standard/src/Console/Output/JsonOutputFormatter.php
                - packages/easy-coding-standard/src/Contract/Application/FileProcessorInterface.php
                - packages/easy-coding-standard/src/Reporter/ProcessedFileReporter.php
                - packages/easy-coding-standard/src/*FileProcessor.php
                - packages/easy-coding-standard/src/Application/EasyCodingStandardApplication.php
                - packages/easy-coding-standard/packages/*/Application/*FileProcessor.php
                - packages/phpstan-rules/src/Collector/*
                - packages/php-config-printer/src/Printer/SmartPhpConfigPrinter.php
                - packages/config-transformer/src/Collector/XmlImportCollector.php

        -
            message: '#Complete known array shape to the method @return type#'
            paths:
                - packages/php-config-printer/src/NodeFactory/Service/ServiceOptionNodeFactory.php

        # messy array shapes - possibly value objects?
        - '#Method Symplify\\EasyCodingStandard\\Application\\(.*?)FileProcessor\:\:processFileInfo\(\) should return (.*?)#'

        # false positive, as just checked by phpunit
        -
            message: '#Offset (.*?)file_diffs(.*?) does not exist on (.*?) array<Symplify\\EasyCodingStandard\\ValueObject\\Error\\FileDiff>#'
            path:  packages/easy-coding-standard/tests/Error/ErrorCollector/FixerFileProcessorTest.php

        # false positive sa checked before
        -
            message: '#Parameter \#1 \$stream of function (.*?) expects resource, resource\|null given#'
            path: packages/easy-parallel/src/ValueObject/ParallelProcess.php

        # needless generics
        - '#Class Symplify\\PHPStanRules\\(.*?)Rule implements generic interface PHPStan\\Rules\\Rule but does not specify its types\: TNodeType#'

        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            paths:
                - packages/phpstan-rules/tests
                - packages/phpstan-rules/packages

        -
            message: '#Cannot call method toString\(\) on PhpParser\\Node\\Name\|null#'
            path: packages/easy-ci/packages/ActiveClass/NodeVisitor/ClassNameNodeVisitor.php

        - '#Parameter \#1 \$values of method Symplify\\PHPStanRules\\Rules\\Enum\\RequireUniqueEnumConstantRule\:\:filterDuplicatedValues\(\) expects array<int\|string>, array<bool\|float\|int\|string> given#'

        # open api
        -
            message: '#On passing a constant, the method should have an enum type\. See https\://phpstan\.org/writing\-php\-code/phpdoc\-types\#literals\-and\-constants#'
            path: packages/easy-coding-standard/packages/Parallel/Application/ParallelFileProcessor.php

        # nesting on purpose
        -
            message: '#New objects with "\$methodCall" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            paths:
                - packages/php-config-printer/src/*Converter/*

        # cached parser
        -
            message: '#Creating new PHPStan(.*?) is not covered by backward compatibility promise#'
            path: packages/astral/src/PhpParser/SmartPhpParserFactory.php

        - '#Calling PHPStan\\Reflection\\ParameterReflectionWithPhpDocs\:\:getNativeType\(\) is not covered by backward compatibility promise#'

        # single constant
        -
            message: '#Parameter argument on position 0 must use constant#'
            path:  packages/easy-ci/packages/ActiveClass/NodeVisitor/UsedClassNodeVisitor.php

        # static parent method
        -
            message: '#Class has a static method must so must contains "Static" in its name#'
            path:  packages/phpstan-extensions/tests/ErrorFormatter/SymplifyErrorFormatterTest.php

        # test case
        - '#Calling PHPStan\\Testing\\ErrorFormatterTestCase\:\:get(.*?)\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'
        - '#Extending PHPStan\\Testing\\ErrorFormatterTestCase is not covered by backward compatibility promise\. The class might change in a minor PHPStan version#'

        # collector metadata
        - '#Method Symplify\\PHPStanRules\\Tests\\Rules\\DeadCode\\(.*?)\:\:getCollectors\(\) return type with generic interface PHPStan\\Collectors\\Collector does not specify its types\: TNodeType, TValue#'
        - '#Method Symplify\\PHPStanRules\\Collector\\ClassMethod\\PublicClassMethodCollector\:\:processNode\(\) should return array<array\{class\-string, string, int\}>\|null but returns array\{class\-string, string, int\}#'

        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\DeadCode\\UnusedPublicClassConstRule\:\:processNode\(\)" is 10, keep it under 8#'

        # silent configure method
        -
            message: '#Class method "configure\(\)" is never used#'
            path: packages/coding-standard/src/Fixer/Annotation/DoctrineAnnotationNestedBracketsFixer.php

        - '#Method (.*?)::getCollectors\(\) return type with generic interface PHPStan\\Collectors\\Collector does not specify its types\: TNodeType, TValue#'

        # relative file path resolving tests
        -
            message: '#Relative file path "(.*?)" is not allowed, use absolute one with __DIR__#'
            paths:
                - packages/smart-file-system/tests/SmartFileInfo/*
                - packages/phpstan-rules/src/Composer/ComposerVendorAutoloadResolver.php
                - packages/monorepo-builder/packages-tests/Merge/ComposerJsonDecorator/RemoverComposerJsonDecorator/RemoverComposerJsonDecoratorTest.php
                - packages/easy-testing/tests/DataProvider/StaticFixtureFinder/StaticFixtureFinderTest.php
                # should be improved
                - packages/monorepo-builder/src/ValueObject/File.php
                - packages/easy-ci/packages/Testing/Command/DetectUnitTestsCommand.php
                - packages/easy-ci/packages-tests/Psr4/ValueObjectFactory/Psr4NamespaceToPathFactory/Psr4NamespaceToPathFactoryTest.php

        - '#Parameter \#(.*?) \$(.*?) of method (.*?) expects array<class\-string>, array<string> given#'

        # false positive on commands
        -
            message: '#Method call return value that should be used, but is not#'
            paths:
                 - packages/easy-ci/src/Composer/SupportedPhpVersionResolver.php
                 - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php
                 - packages/smart-file-system/tests/SmartFileInfo/SmartFileInfoTest.php
                 # skip edge case
                 - packages/easy-coding-standard/packages/SniffRunner/ValueObject/File.php
                 - packages/config-transformer/src/DependencyInjection/Loader/IdAwareXmlFileLoader.php

        - '#Method Symplify\\PHPStanRules\\Rules\\Domain\\NoDuplicatedRegexRule\:\:groupConstantsBySharedValue\(\) should return array<string, array<Symplify\\PHPStanRules\\ValueObject\\ClassConstRegexMetadata>> but returns array<int\|string, array<int, Symplify\\PHPStanRules\\ValueObject\\ClassConstRegexMetadata>>#'

        # partial enum
        - '#Method Symplify\\CodingStandard\\TokenRunner\\Analyzer\\FixerAnalyzer\\BlockFinder\:\:(getBlockTypeByContent|getBlockTypeByToken)\(\) never returns \d+ so it can be removed from the return type#'

        # narrowed to generic type
        - '#Method Symplify\\(.*?)\\TypeAwareNodeFinder\:\:(findInstanceOf|findFirstInstanceOf)\(\) should return (.*?)#'

        # on purpose as the "abstract" is the keyword of method name :)
        -
            message: '#Class name starting with "Abstract" must have an `abstract` keyword#'
            path: packages/php-config-printer/src/ServiceOptionConverter/AbstractServiceOptionKeyYamlToPhpFactory.php

        # not neccesary complexity
        -
            path: packages/easy-ci/packages/SymfonyNameToTypeService/NameToTypeServiceReplacer.php
            message: '#Instead of "Symfony\\Component\\Finder\\SplFileInfo" class/interface use "Symplify\\SmartFileSystem\\SmartFileInfo"#'

        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\RequireThisOnParentMethodCallRule\:\:processNode\(\)" is 9, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\NoNestedFuncCallRule\:\:processNode\(\)" is 10, keep it under 8#'

        -
            message: '#array_count_values\(\)\: Can only count string and integer values, entry skipped#'
            paths:
                - packages/phpstan-rules/src/Rules/Enum/RequireUniqueEnumConstantRule.php
                - packages/phpstan-rules/src/NodeAnalyzer/ScalarValueResolver.php

        # decoupling
        -
            message: '#Parameter argument on position 0 must use constant#'
            path: packages/php-config-printer/src/ExprResolver/StringExprResolver.php

        -
            message: '#Class method "parseDocBlock\(\)" is never used#'
            path: packages/phpstan-rules/src/PhpDocParser/SimplePhpDocParser.php

        # phpstan collector data
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\Domain\\ForbiddenAlwaysSetterCallRule\:\:createGrouppedCallsByClass\(\)" is 10, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Collector\\ClassMethod\\NewAndSetterCallsCollector\:\:processNode\(\)" is 17, keep it under 8#'
        - '#Calling PHPStan\\Reflection\\Php\\PhpParameterReflection\:\:isOptional\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # 2 different packages
        - '#The "(INPUT_SUFFIX_REGEX|CONFIG_SUFFIXES_REGEX)" constant contains duplicated regex "\#\\\.\(yml\|yaml\|xml\)\$\#"\. Instead of duplicated regexes, extract domain regexes together to save maintenance#'

        # astral left over
        -
            message: '#Content of method "(.*?)" is duplicated\. Use unique content or service instead#'
            paths:
                - packages/astral/src/NodeVisitor/CallableNodeVisitor.php
                - packages/phpstan-rules/src/NodeVisitor/CallableNodeVisitor.php
                - packages/astral/src/PhpDocParser/SimplePhpDocParser.php
                - packages/phpstan-rules/src/PhpDocParser/SimplePhpDocParser.php
                - packages/phpstan-rules/src/PhpDoc/BarePhpDocParser.ph
                - packages/astral/src/Reflection/ReflectionParser.php
                - packages/phpstan-rules/src/Reflection/ReflectionParser.php
                - packages/astral/src/PhpDocParser/PhpDocNodeTraverser.php
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php
                - packages/astral/src/TypeAnalyzer/ClassMethodReturnTypeResolver.php
                - packages/phpstan-rules/src/TypeResolver/ClassMethodReturnTypeResolver.php

                - packages/phpstan-rules/src/Rules/Explicit/ExplicitMethodCallOverMagicGetSetRule.php
                - packages/phpstan-rules/packages/Symfony/Rules/PreventDoubleSetParameterRule.php
                - packages/phpstan-rules/packages/Symfony/Rules/RequireNamedCommandRule.php
                - packages/package-builder/src/Php/TypeChecker.php
                - packages/phpstan-rules/packages/CognitiveComplexity/NodeAnalyzer/ComplexityAffectingNodeFinder.php

        # decopuling on purpose
        -
            message: '#Content of method "isVariableName\(\)" is duplicated\. Use unique content or service instead#'
            paths:
                - packages/phpstan-rules/packages/Nette/Rules/NoNetteDoubleTemplateAssignRule.php

        -
            message: '#Content of method "getNextMeaningfulToken\(\)" is duplicated\. Use unique content or service instead#'
            paths:
                - packages/coding-standard/src/TokenAnalyzer/Naming/MethodNameResolver.php
                - packages/coding-standard/src/TokenAnalyzer/HeredocAnalyzer.php
                - packages/coding-standard/src/Fixer/Spacing/NewlineServiceDefinitionConfigFixer.php
                - packages/coding-standard/src/Fixer/ArrayNotation/ArrayOpenerAndCloserNewlineFixer.php
