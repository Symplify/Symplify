includes:
    # @todo why are these needed? should be loaded by extension installer
    - vendor/tomasvotruba/unused-public/config/extension.neon
    - vendor/tomasvotruba/cognitive-complexity/config/extension.neon

    - packages/phpstan-extensions/config/config.neon
    - packages/phpstan-rules/config/symplify-rules.neon
    # for cognitive rules
    - packages/phpstan-rules/config/packages/cognitive-complexity/cognitive-complexity-services.neon
    - packages/phpstan-rules/config/services/services.neon

    - packages/phpstan-rules/config/packages/symfony/services.neon

parameters:
    level: 8
    reportUnmatchedIgnoredErrors: false

    cognitive_complexity:
        class: 25
        function: 8

    unused_public:
        properties: true
        constants: true
        methods: true

    # requires exact closure types
    checkMissingCallableSignature: true

    parallel:
        # to prevent full thread lagging pc
        maximumNumberOfProcesses: 15

    paths:
        - packages
        - ecs.php
        - rector.php

    excludePaths:
        # deprecated, to be removed
        - packages/phpstan-rules/packages/CognitiveComplexity

        - */scoper.php

        # parallel
        - packages/phpstan-rules/packages/*-phpstan-printer/tests/*ToPhpCompiler/Fixture*
        - packages/*-phpstan-compiler/tests/*ToPhpCompiler/Fixture*

        # there is some bug
        - packages/package-builder/src/Testing/AbstractKernelTestCase.php

        # PHP 8 only
        - packages/phpstan-rules/tests/Rules/ForbiddenArrayWithStringKeysRule/FixturePhp80/SkipAttributeArrayKey.php

        # functions false positive
        - packages/phpstan-extensions/tests/TypeExtension/*/*/data/*

        # tests
        - packages/symfony-static-dumper/tests/test_project/

        # 3rd party
        - packages/package-builder/src/Yaml/ParametersMerger.php

        # tests

        - '*/tests/**/Source/*'
        - '*/tests/**/Fixture/*'
        - */stubs/*
        - */packages-tests/**/Fixture/*
        - */packages-tests/**/Source/*
        # private code for deployed package only
        - packages/phpstan-rules/build/*

    bootstrapFiles:
        - tests/bootstrap.php
        # load functions like service() etc.
        - vendor/symfony/dependency-injection/Loader/Configurator/ContainerConfigurator.php

    ignoreErrors:
        # required for autowiring, since only interface is autowired
        - '#Call to an undefined method Symfony\\Component\\DependencyInjection\\ContainerInterface::getParameterBag\(\)#'

        # phpstan 0.10 news
        - '#Parameter \#1 \$path of function dirname expects string, string\|false given#'

        - '#Parameter \#1 \$endPath of method Symfony\\Component\\Filesystem\\Filesystem\:\:makePathRelative\(\) expects string, string\|false given#'

        -
            message: '#Use value object over return of values#'
            paths:
                # direct string printer
                - packages/rule-doc-generator/src/Printer/CodeSamplePrinter/BadGoodCodeSamplePrinter.php

        -
            message: '#Do not use static property#'
            paths:
                - packages/easy-testing/src/StaticFixtureSplitter.php # 19

        -
            message: '#is forbidden to use#'
            paths:
                - packages/easy-testing/src/PHPUnit/Behavior/DirectoryAssertableTrait.php # 18

        -
            message: '#Use explicit return value over magic &reference#'
            paths:
                - packages/package-builder/src/Reflection/PrivatesCaller.php # 40
                - */PhpDocParser/PhpDocNodeTraverser.php

        # exceptions to get file
        -
            message: '#Function "file_get_contents\(\)" cannot be used/left in the code\: Use Symplify\\SmartFileSystem\\SmartFileSystem\:\:readFile\(\) instead#'
            paths:
                - packages/smart-file-system/src/SmartFileSystem.php

        # child type
        - '#Parameter \#1 \$node of method Symplify\\PHPStanRules\\Rules\\ForbiddenSpreadOperatorRule\:\:hasVariadicParam\(\) expects PhpParser\\Node\\Expr\\ArrowFunction\|PhpParser\\Node\\Expr\\Closure\|PhpParser\\Node\\Stmt\\ClassMethod\|PhpParser\\Node\\Stmt\\Function_, PhpParser\\Node\\Expr\\ArrowFunction\|PhpParser\\Node\\Expr\\Closure\|\(PhpParser\\Node\\Expr\\FuncCall&PhpParser\\Node\\FunctionLike\)\|\(PhpParser\\Node\\Expr\\MethodCall&PhpParser\\Node\\FunctionLike\)\|\(PhpParser\\Node\\Expr\\StaticCall&PhpParser\\Node\\FunctionLike\)\|PhpParser\\Node\\Stmt\\ClassMethod\|PhpParser\\Node\\Stmt\\Function_ given#'

        # nesting
        - '#Parameter \#1 \$items of class PhpParser\\Node\\Expr\\Array_ constructor expects array<PhpParser\\Node\\Expr\\ArrayItem\|null\>, array<PhpParser\\Node\\Arg\> given#'

        -
            message: '#Array destruct is not allowed\. Use value object to pass data instead#'
            paths:
                - packages/smart-file-system/src/Normalizer/PathNormalizer.php

        - '#Parameter (.*?) class ReflectionClass constructor expects class\-string<T of object\>\|T of object, string given#'

        -
            message: '#Array with keys is not allowed\. Use value object to pass data instead#'
            path: packages/php-config-printer/src/Printer/SmartPhpConfigPrinter.php

        -
            message: '#Function "method_exists\(\)" cannot be used/left in the code#'
            paths:
                # PHPUnit 9/10 compat
                - packages/symfony-static-dumper/tests/FileSystem/AssetsCopierTest.php
                - packages/php-config-printer/src/NodeFactory/ConstantNodeFactory.php

        -
            message: '#Function "property_exists\(\)" cannot be used/left in the code#'
            paths:
                # PHP compat
                - packages/package-builder/src/Reflection/PrivatesAccessor.php

        - '#Method Symplify\\PHPStanRules\\NodeFinder\\MethodCallNodeFinder\:\:findUsages\(\) should return array<PhpParser\\Node\\Expr\\MethodCall\> but returns array<PhpParser\\Node\>#'

        -
            message: '#Class cognitive complexity is \d+, keep it under \d+#'
            paths:
                 # traversing is complex operatoin
                 - packages/php-config-printer/src/NodeFactory/ArgsNodeFactory.php

        - '#Method Symplify\\EasyTesting\\DataProvider\\StaticFixtureFinder\:\:yieldDirectoryExclusively\(\) should return Iterator<mixed, Symplify\\SmartFileSystem\\SmartFileInfo\> but returns Iterator<mixed, array<int, Symplify\\SmartFileSystem\\SmartFileInfo\>\>#'

        # wrong keys
        - '#Generator expects value type array<array<int\|string\>\|string\>, array<int, array<int, array<int, int\|string\>\>\|string\> given#'
        -
            message: '#Generator expects value type (.*?), array<int, array<int, array<int, int\|string\>\>\|string\> given#'
            paths:
                -  packages/phpstan-rules/tests/Rules

        -
            message: '#Use explicit names over dynamic ones#'
            paths:
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        -
            message:  '#Use separate function calls with readable variable names#'
            paths:
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#\$reflectionClass with generic class ReflectionClass but does not specify its types\: T#'

        -
            message: '#cognitive complexity is \d+, keep it under \d+#i'
            paths:
                - packages/php-config-printer/src/PhpParser/NodeFactory/ConfiguratorClosureNodeFactory.php
                - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#Cognitive complexity for "Symplify\\PHPStanRules\\PhpDocParser\\PhpDocNodeTraverser\:\:traverseArray\(\)" is 35, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\PhpDocParser\\PhpDocNodeTraverser\:\:traverseNode\(\)" is 32, keep it under 8#'

        -
            message: '#Cannot call method (.*?) on PHPStan\\Command\\Output\|null#'
            path: packages/phpstan-extensions/src/ErrorFormatter/SymplifyErrorFormatter.php

        -
            message: '#Instead of abstract class, use specific service with composition#'
            paths:
                 - packages/phpstan-rules/src/Rules/AbstractSymplifyRule.php
                 - packages/rule-doc-generator-contracts/src/ValueObject/AbstractCodeSample.php
                 - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeVisitor/AbstractPhpDocNodeVisitor.php
                 - packages/symplify-kernel/src/HttpKernel/AbstractSymplifyKernel.php

        -
            message: '#Spread operator is not allowed#'
            path: packages/phpstan-extensions/tests/TypeExtension/*/*TypeExtension/*Test.php

        -
            message: '#Cognitive complexity for "(.*?)" is \d+, keep it under 8#'
            paths:
                # complex search for possible directories
                - packages/easy-parallel/src/CommandLine/WorkerCommandLineFactory.php

        # is never string
        - '#"@file_get_contents\(\$fileName\)" is forbidden to use#'

        # not useful
        - '#Parameter \#2 \$length of function array_chunk expects int<1, max\>, int given#'

        # invalid PHPStan type - it alwasy requires 2 types to traverse with callable
        -
            message: '#Callable callable\(PHPStan\\Type\\Type\)\: PHPStan\\Type\\Type invoked with 2 parameters, 1 required#'
            path: packages/phpstan-rules/src/Rules/Explicit/NoMixedCallableRule.php

        # false positive sa checked before
        -
            message: '#Parameter \#1 \$stream of function (.*?) expects resource, resource\|null given#'
            path: packages/easy-parallel/src/ValueObject/ParallelProcess.php

        # needless generics
        - '#Class Symplify\\PHPStanRules\\(.*?)Rule implements generic interface PHPStan\\Rules\\Rule but does not specify its types\: TNodeType#'

        - '#Parameter \#1 \$values of method Symplify\\PHPStanRules\\Rules\\Enum\\RequireUniqueEnumConstantRule\:\:filterDuplicatedValues\(\) expects array<int\|string>, array<bool\|float\|int\|string> given#'

        # nesting on purpose
        -
            message: '#New objects with "\$methodCall" name are overridden\. This can lead to unwanted bugs, please pick a different name to avoid it#'
            paths:
                - packages/php-config-printer/src/*Converter/*

        - '#Calling PHPStan\\Reflection\\ParameterReflectionWithPhpDocs\:\:getNativeType\(\) is not covered by backward compatibility promise#'

        # test case
        - '#Calling PHPStan\\Testing\\ErrorFormatterTestCase\:\:get(.*?)\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'
        - '#Extending PHPStan\\Testing\\ErrorFormatterTestCase is not covered by backward compatibility promise\. The class might change in a minor PHPStan version#'

        - '#Method (.*?)::getCollectors\(\) return type with generic interface PHPStan\\Collectors\\Collector does not specify its types\: TNodeType, TValue#'

        # relative file path resolving tests
        -
            message: '#Relative file path "(.*?)" is not allowed, use absolute one with __DIR__#'
            paths:
                - packages/smart-file-system/tests/SmartFileInfo/*
                - packages/easy-testing/tests/DataProvider/StaticFixtureFinder/StaticFixtureFinderTest.php

        - '#Parameter \#(.*?) \$(.*?) of method (.*?) expects array<class\-string>, array<string> given#'

        # false positive on commands
        -
            message: '#Method call return value that should be used, but is not#'
            paths:
                 - packages/phpstan-rules/src/PhpDocParser/PhpDocNodeTraverser.php

        - '#Method Symplify\\PHPStanRules\\Rules\\Domain\\NoDuplicatedRegexRule\:\:groupConstantsBySharedValue\(\) should return array<string, array<Symplify\\PHPStanRules\\ValueObject\\ClassConstRegexMetadata>> but returns array<int\|string, array<int, Symplify\\PHPStanRules\\ValueObject\\ClassConstRegexMetadata>>#'

        # narrowed to generic type
        - '#Method Symplify\\(.*?)\\TypeAwareNodeFinder\:\:(findInstanceOf|findFirstInstanceOf)\(\) should return (.*?)#'

        # on purpose as the "abstract" is the keyword of method name :)
        -
            message: '#Class name starting with "Abstract" must have an `abstract` keyword#'
            path: packages/php-config-printer/src/ServiceOptionConverter/AbstractServiceOptionKeyYamlToPhpFactory.php

        # not neccesary complexity
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\RequireThisOnParentMethodCallRule\:\:processNode\(\)" is 9, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\NoNestedFuncCallRule\:\:processNode\(\)" is 10, keep it under 8#'

        # decoupling
        -
            message: '#Parameter argument on position 0 must use constant#'
            path: packages/php-config-printer/src/ExprResolver/StringExprResolver.php

        # phpstan collector data
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Rules\\Domain\\ForbiddenAlwaysSetterCallRule\:\:createGrouppedCallsByClass\(\)" is 10, keep it under 8#'
        - '#Cognitive complexity for "Symplify\\PHPStanRules\\Collector\\ClassMethod\\NewAndSetterCallsCollector\:\:processNode\(\)" is 17, keep it under 8#'
        - '#Calling PHPStan\\Reflection\\Php\\PhpParameterReflection\:\:isOptional\(\) is not covered by backward compatibility promise\. The method might change in a minor PHPStan version#'

        # astral left over
        -
            message: '#Content of method "(.*?)" is duplicated\. Use unique content or service instead#'
            paths:
                - packages/phpstan-rules/src/PhpDocParser/SimplePhpDocParser.php
                - packages/phpstan-rules/src/PhpDoc/BarePhpDocParser.ph

        # to separate packages
        -
            message: '#Content of method "(.*?)\(\)" is duplicated\. Use unique content or service instead#'
            paths:
                - packages/rule-doc-generator/tests/Fixture/StaticFixtureUpdater.php
                - packages/easy-testing/src/DataProvider/StaticFixtureUpdater.php

        # un helpful
        - '#Parameter (.*?) expects non\-empty\-string, string given#'

        -
            message: '#Instead of protected element in use private element or contract method#'
            paths:
                - packages/package-builder/src/Console/Command/AbstractSymplifyCommand.php
